// Espera todo o conteúdo HTML ser carregado
document.addEventListener('DOMContentLoaded', () => {
    // Tenta registrar plugins Chart.js
    try { if (typeof ChartDataLabels !== 'undefined') { Chart.register(ChartDataLabels); console.log("Plugin Datalabels OK."); } else { console.error("Plugin Datalabels não carregado."); } } catch (e) { console.error("Erro registro Datalabels:", e); }
    console.log("--- Iniciando script.js ---");

    // --- 1. Seleção de Elementos ---
    console.log("Selecionando elementos...");
    const formProduto = document.getElementById('form-produto'); const btnPrincipalAcao = document.getElementById('btn-principal-acao'); const inputNumOP = document.getElementById('num-op'); const inputCodEntrada = document.getElementById('cod-entrada'); const inputCodSaida = document.getElementById('cod-saida'); const inputDescricao = document.getElementById('descricao'); const inputCliente = document.getElementById('cliente'); const inputBeneficiamento = document.getElementById('beneficiamento'); const inputSetor = document.getElementById('setor'); const inputPesoUnitario = document.getElementById('peso-unitario'); const inputUnidade = document.getElementById('unidade'); const inputValorUnitario = document.getElementById('valor-unitario'); const inputQuantidadeRetrabalho = document.getElementById('quantidade-retrabalho'); const tbodyHistorico = document.getElementById('tbody-historico'); const listaMaisFrequentes = document.getElementById('lista-mais-frequentes'); const listaSetoresFrequentes = document.getElementById('lista-setores-frequentes'); const listaMaiorQuantidade = document.getElementById('lista-maior-quantidade'); const paragrafoCustoTotal = document.getElementById('paragrafo-custo-total'); const canvasFrequencia = document.getElementById('grafico-frequencia-produto'); const canvasCustoSetor = document.getElementById('grafico-custo-setor'); const canvasQuantidade = document.getElementById('grafico-quantidade-produto'); const inputBuscaHistorico = document.getElementById('busca-historico'); const btnExportarCSV = document.getElementById('btn-exportar-csv'); const inputFiltroInicio = document.getElementById('filtro-data-inicio'); const inputFiltroFim = document.getElementById('filtro-data-fim'); const btnFiltrarData = document.getElementById('btn-filtrar-data'); const btnLimparFiltroData = document.getElementById('btn-limpar-filtro-data');
    const checkboxModoCadastro = document.getElementById('modo-cadastro-checkbox');
    const inputsReadonlyToggle = [ inputCodEntrada, inputCodSaida, inputDescricao, inputCliente, inputBeneficiamento, inputSetor, inputPesoUnitario, inputUnidade, inputValorUnitario ];
    if (!formProduto || !inputNumOP || !tbodyHistorico || !inputBuscaHistorico || !btnExportarCSV || !inputFiltroInicio || !inputFiltroFim || !btnFiltrarData || !btnLimparFiltroData || !checkboxModoCadastro) { console.error("ERRO: Elementos essenciais!"); alert("Erro crítico!"); return; } console.log("Elementos selecionados.");

    // --- 2. Estado da Aplicação ---
    let bancoDeDadosSimulado_API = []; let historicoRetrabalho_API = [];
    let isCadastroMode = false;
    let chartInstanceFrequencia = null; let chartInstanceCustoSetor = null; let chartInstanceQuantidade = null;

    // --- 3. Funções de Simulação da API Backend ---
    console.log("Definindo funções de simulação da API...");
    const SIMULATED_DELAY = 300;
    function salvarEstadoLocal() { try { localStorage.setItem('controleRetrabalhoV2_historico', JSON.stringify(historicoRetrabalho_API)); } catch (e) {} try { localStorage.setItem('controleRetrabalhoV2_produtos', JSON.stringify(bancoDeDadosSimulado_API)); } catch (e) {} console.log("DEBUG: Estado local API Sim salvo."); }
    function carregarEstadoLocal() { try {const hs=localStorage.getItem('controleRetrabalhoV2_historico'); if(hs){const pd=JSON.parse(hs); if(Array.isArray(pd)) historicoRetrabalho_API=pd;}} catch(e){} try {const ps=localStorage.getItem('controleRetrabalhoV2_produtos'); if(ps){const pd=JSON.parse(ps); if(Array.isArray(pd)) bancoDeDadosSimulado_API=pd;} else { bancoDeDadosSimulado_API = [ { OP: '10', codEntrada: '51883168', codSaida: 'AE40018009', descricao: 'REFORCO FREIO DE MAO COMPLETO', cliente: 'CISER FIXADORES AUTOMOTIVOS SA', beneficiamento: 'ZN INCOLOR TRIVALENTE - EA1', setor: 'ESTACIONARIO I', pesoUnitario: '0.80', unidade: 'KG', valorUnitario: 2.71 }, { OP: '30', codEntrada: '46480294E', codSaida: '46480294', descricao: 'STAFFA RINF BOCCHETONE PK-UP EST', cliente: 'ACUMENT BRASIL SISTEMAS DE FIXAÇÃO LTDA', beneficiamento: 'ZN IRIDESCENTE TRIVALENTE - EA1', setor: 'ESTACIONARIO I', pesoUnitario: '0.18', unidade: 'KG', valorUnitario: 0.47 }, { OP: '28', codEntrada: 'AE020120033CS', codSaida: 'AE020120033', descricao: 'SUPORTE FILTRO COMPLETO', cliente: 'AETHRA SISTEMAS AUTOMOTIVOS S.A.', beneficiamento: 'ZN INCOLOR TRIVALENTE - RA1', setor: 'ROTATIVO I', pesoUnitario: '0.03', unidade: 'PC', valorUnitario: 0.50 }, { OP: '115', codEntrada: '5U48390579T', codSaida: '5U4.839.057.9', descricao: 'PRESILHA ESTAMPADA COM TRAT TERMICO', cliente: 'DAYCO POWER TRANSMISSION LTDA', beneficiamento: 'ZN IRIDESCENTE TRIVALENTE + DSH - RA1', setor: 'ROTATIVO I', pesoUnitario: '0.00', unidade: 'PC', valorUnitario: 0.07 }, { OP: '200', codEntrada: 'E3B1-9034-A-03C', codSaida: 'E3B19034A03Z', descricao: 'INSERTO CAP RETAINER FLEX PETROL', cliente: 'TIBERINA AUTOMOTIVE MG COMP. MET. P/IND AUTOM LTDA', beneficiamento: 'ZN NIQUEL INCOLOR + SELANTE - RA2', setor: 'ROTATIVO II', pesoUnitario: '0.07', unidade: 'PC', valorUnitario: 0.65 }, { OP: '29', codEntrada: 'HDB080', codSaida: '55181233', descricao: 'WUM64 POLIA COND BALANCEADA', cliente: 'JOALMI IND E COM LTDA', beneficiamento: 'ZN IRIDESCENTE TRIVALENTE + SELANTE - EA2', setor: 'ESTACIONARIO II', pesoUnitario: '1.72', unidade: 'PC', valorUnitario: 2.43 } ]; salvarEstadoLocal();}} catch(e){} console.log("Estado local API Sim carregado:", { historico: historicoRetrabalho_API.length, produtos: bancoDeDadosSimulado_API.length }); }
    // apiRegistrarRetrabalho removida
    async function apiObterHistorico(dataInicio = null, dataFim = null) { console.log(`API_SIM: Obtendo hist (De:${dataInicio},Até:${dataFim})...`); await new Promise(r=>setTimeout(r, SIMULATED_DELAY/3)); let hF = [...historicoRetrabalho_API]; if (dataInicio || dataFim) { const iTs=dataInicio?new Date(dataInicio+'T00:00:00').getTime():null; const fTs=dataFim?new Date(dataFim+'T23:59:59').getTime():null; hF=hF.filter(r=>{const rTs=r.timestamp?new Date(r.timestamp).getTime():0; const aS=(iTs===null)||(rTs>=iTs); const bE=(fTs===null)||(rTs<=fTs); return aS&&bE;}); } console.log(`API_SIM: Hist obtido (${hF.length}).`); return hF; }
    async function apiExcluirRegistro(index) { console.log(`API_SIM: Excluindo índice ${index}...`); await new Promise(r => setTimeout(r, SIMULATED_DELAY)); if (index >= 0 && index < historicoRetrabalho_API.length) { const ex = historicoRetrabalho_API.splice(index, 1); salvarEstadoLocal(); console.log("API_SIM: Registro excluído.", ex[0]); return { success: true }; } else { console.error("API_SIM: Erro - índice inválido:", index); return { success: false, error: 'Índice inválido' }; } }
    async function apiCadastrarProduto(novoProduto) { console.log("API_SIM: Cadastrando...", novoProduto); await new Promise(r => setTimeout(r, SIMULATED_DELAY)); if (bancoDeDadosSimulado_API.some(p=>p.OP===novoProduto.OP)){ return { success: false, error: `OP '${novoProduto.OP}' já existe!` }; } if (bancoDeDadosSimulado_API.some(p=>p.codEntrada.toUpperCase()===novoProduto.codEntrada.toUpperCase())){ return { success: false, error: `Cód. Entrada '${novoProduto.codEntrada}' já existe!` }; } novoProduto.id = gerarIdUnicoProduto(); bancoDeDadosSimulado_API.push(novoProduto); salvarEstadoLocal(); console.log("API_SIM: Produto cadastrado.", novoProduto); return { success: true, data: novoProduto }; }
    async function apiCalcularRelatorios(dataInicio = null, dataFim = null) { console.log(`API_SIM: Calculando relat (De:${dataInicio},Até:${dataFim})...`); const dados = await apiObterHistorico(dataInicio, dataFim); if (dados.length === 0) return { totalCost: 0, topFrequency: [], topQuantity: [], topSectors: [], topSectorCost: [] }; const freq={}, quant={}, sectFreq={}, costSect={}; let tC=0; dados.forEach(r=>{const pK=r.codEntrada||'N/A';const sK=r.setor||'N/A';const cV=r.custo||0;freq[pK]=(freq[pK]||0)+1;quant[pK]=(quant[pK]||0)+r.quantidade;tC+=cV;sectFreq[sK]=(sectFreq[sK]||0)+1;costSect[sK]=(costSect[sK]||0)+cV;}); const sF=Object.entries(freq).sort(([,a],[,b])=>b-a).slice(0,5).map(([c,n])=>({codEntrada:c,count:n})); const sQ=Object.entries(quant).sort(([,a],[,b])=>b-a).slice(0,5).map(([c,s])=>({codEntrada:c,sum:s})); const sS=Object.entries(sectFreq).sort(([,a],[,b])=>b-a).slice(0,3).map(([s,n])=>({sector:s,count:n})); const sCS=Object.entries(costSect).sort(([,a],[,b])=>b-a).slice(0,3).map(([s,c])=>({sector:s,cost:c})); const reportData={totalCost:tC,topFrequency:sF,topQuantity:sQ,topSectors:sS,topSectorCost:sCS}; console.log("API_SIM: Relatórios calculados.", reportData); return reportData; }

    // --- 4. Funções de Interface ---
    console.log("Definindo funções de interface...");
    function preencherFormulario(dadosItem) { if(isCadastroMode&&dadosItem)return; console.log("Preenchendo/Limpando Form:", dadosItem); inputCodEntrada.value=dadosItem?.codEntrada||""; inputCodSaida.value=dadosItem?.codSaida||""; inputDescricao.value=dadosItem?.descricao||""; inputCliente.value=dadosItem?.cliente||""; inputBeneficiamento.value=dadosItem?.beneficiamento||""; inputSetor.value=dadosItem?.setor||""; inputPesoUnitario.value=dadosItem?.pesoUnitario||""; inputUnidade.value=dadosItem?.unidade||""; inputValorUnitario.value=parseFloat(dadosItem?.valorUnitario||0).toFixed(2); inputQuantidadeRetrabalho.value=""; if(dadosItem) inputQuantidadeRetrabalho.focus(); }
    function toggleCadastroMode(ativar) { isCadastroMode=ativar; console.log(`Modo Cadastro: ${isCadastroMode}`); const qC=inputQuantidadeRetrabalho.closest('.campo-form'); if(isCadastroMode){btnPrincipalAcao.textContent='Salvar Novo Produto';btnPrincipalAcao.style.backgroundColor='#0d6efd';inputNumOP.readOnly=false;inputNumOP.placeholder='NOVA OP';inputQuantidadeRetrabalho.disabled=true;if(qC)qC.style.opacity='0.5';inputsReadonlyToggle.forEach(i=>{i.readOnly=false;i.style.backgroundColor='';i.style.cursor='';});formProduto.reset();preencherFormulario(null);inputNumOP.focus();console.log("Interface: CADASTRO.");}else{btnPrincipalAcao.textContent='Registrar Retrabalho';btnPrincipalAcao.style.backgroundColor='#28a745';inputNumOP.readOnly=false;inputNumOP.placeholder='';inputQuantidadeRetrabalho.disabled=false;if(qC)qC.style.opacity='1';inputsReadonlyToggle.forEach(i=>{i.readOnly=true;i.style.backgroundColor='';i.style.cursor='';});formProduto.reset();preencherFormulario(null);inputNumOP.focus();console.log("Interface: RETRABALHO.");} }
    function filtrarTabelaHistorico() { const t=inputBuscaHistorico.value.toLowerCase().trim(); const lns=tbodyHistorico.querySelectorAll('tr'); let lV=0; console.log(`Filtrando por "${t}"`); lns.forEach(l=>{if(l.querySelector('.historico-vazio')){l.style.display='';return;} const txtL=l.textContent.toLowerCase(); const c=txtL.includes(t); l.style.display=c?'':'none'; if(c)lV++;}); console.log(`${lV} linhas visíveis.`); }
    function gerarIdUnicoProduto() { return 'prod_' + Date.now().toString(36) + Math.random().toString(36).substring(2, 7); }
    async function renderizarTabelaHistorico() { console.log("Render Tabela: Buscando..."); tbodyHistorico.innerHTML=`<tr><td colspan="8" class="historico-vazio">Carregando...</td></tr>`; btnExportarCSV.disabled=true; try { const dI=inputFiltroInicio.value||null; const dF=inputFiltroFim.value||null; const data=await apiObterHistorico(dI,dF); console.log(`Render Tabela: ${data.length} itens.`); tbodyHistorico.innerHTML=''; const nC=8; const hD=data.length>0; if(!hD){const tF=dI||dF; tbodyHistorico.innerHTML=`<tr><td colspan="${nC}" class="historico-vazio">${tF?'Nada período.':'Nenhum registro.'}</td></tr>`;} else{data.forEach((reg)=>{ const rI=historicoRetrabalho_API.findIndex(i=>i.timestamp===reg.timestamp&&i.numOP===reg.numOP); const tr=document.createElement('tr');tr.setAttribute('data-index',rI);const dF=new Date(reg.timestamp).toLocaleString('pt-BR',{day:'2-digit',month:'2-digit',year:'numeric',hour:'2-digit',minute:'2-digit'});const cF=(reg.custo||0).toLocaleString('pt-BR',{style:'currency',currency:'BRL'});tr.innerHTML=`<td>${dF}</td><td>${reg.codEntrada||''}</td><td>${reg.descricao||''}</td><td>${reg.setor||''}</td><td>${reg.beneficiamento||''}</td><td>${reg.quantidade}</td><td>${cF}</td><td><button class="btn-excluir-registro" data-index="${rI}" title="Excluir">Excluir</button></td>`;tbodyHistorico.appendChild(tr);});} btnExportarCSV.disabled=!hD; console.log(`Tabela renderizada. Exportar ${hD?'ON':'OFF'}.`); filtrarTabelaHistorico(); } catch(e){console.error("ERRO render Tabela:",e);tbodyHistorico.innerHTML=`<tr><td colspan="8" class="historico-vazio" style="color:red;">Erro ao carregar histórico.</td></tr>`;} }
    function renderCharts(reportDataAPI) { console.log("Fn renderCharts: Iniciando..."); try { if(chartInstanceFrequencia instanceof Chart) chartInstanceFrequencia.destroy(); } catch(e){} finally { chartInstanceFrequencia=null; } try { if(chartInstanceCustoSetor instanceof Chart) chartInstanceCustoSetor.destroy(); } catch(e){} finally { chartInstanceCustoSetor=null; } try { if(chartInstanceQuantidade instanceof Chart) chartInstanceQuantidade.destroy(); } catch(e){} finally { chartInstanceQuantidade=null; } if(typeof Chart==='undefined'||typeof ChartDataLabels==='undefined'){console.error("ERRO: Chart.js/Datalabels.");return;} if(!reportDataAPI){console.warn("AVISO: reportDataAPI null.");return;} const hasData=reportDataAPI.topFrequency?.length||reportDataAPI.topQuantity?.length||reportDataAPI.topSectorCost?.length; if(!hasData){console.warn("AVISO: Sem dados para gráficos.");return;} console.log("INFO: Renderizando gráficos..."); const {topFrequency=[],topQuantity=[],topSectorCost=[]}=reportDataAPI; const cP={blue:{bg:'rgba(54,162,235,0.7)',br:'rgba(54,162,235,1)'},red:{bg:'rgba(255,99,132,0.7)',br:'rgba(255,99,132,1)'},teal:{bg:'rgba(75,192,192,0.7)',br:'rgba(75,192,192,1)'}}; const commonOpts={responsive:true,maintainAspectRatio:false,scales:{x:{ticks:{font:{size:10}},grid:{display:false}},y:{beginAtZero:true,grid:{color:'#eee'}}},plugins:{legend:{display:false},title:{display:true,padding:{top:10,bottom:10},font:{size:13,weight:'500'},color:'#444'},datalabels:{display:true,anchor:'end',align:'end',offset:-2,color:'#333',font:{size:9,weight:'bold'},formatter:(v)=>v===0?'':v}}}; try{const ctx=canvasFrequencia?.getContext('2d');if(ctx&&topFrequency.length>0){const l=topFrequency.map(i=>i.codEntrada);const d=topFrequency.map(i=>i.count);chartInstanceFrequencia=new Chart(ctx,{type:'bar',data:{labels:l,datasets:[{label:'Registros',data:d,backgroundColor:cP.blue.bg,borderColor:cP.blue.br,borderWidth:1}]},options:{...commonOpts,plugins:{...commonOpts.plugins,title:{...commonOpts.plugins.title,text:'Top 5 Produtos por Frequência'},datalabels:{...commonOpts.plugins.datalabels}}}});console.log("SUCESSO: Gráfico Frequência.");}else if(!ctx)console.warn("AVISO: Canvas Freq.");}catch(e){console.error("ERRO Gráfico Frequência:",e);chartInstanceFrequencia=null;} try{const ctx=canvasCustoSetor?.getContext('2d');if(ctx&&topSectorCost.length>0){const l=topSectorCost.map(i=>i.sector);const d=topSectorCost.map(i=>i.cost);chartInstanceCustoSetor=new Chart(ctx,{type:'bar',data:{labels:l,datasets:[{label:'Custo Total',data:d,backgroundColor:cP.red.bg,borderColor:cP.red.br,borderWidth:1}]},options:{...commonOpts,scales:{...commonOpts.scales,y:{beginAtZero:true,grid:{color:'#eee'},ticks:{callback:v=>v.toLocaleString('pt-BR',{style:'currency',currency:'BRL',minimumFractionDigits:0})}}},plugins:{...commonOpts.plugins,title:{...commonOpts.plugins.title,text:'Custo Total por Setor (Top 3)'},datalabels:{...commonOpts.plugins.datalabels,formatter:v=>v===0?'':v.toLocaleString('pt-BR',{style:'currency',currency:'BRL',minimumFractionDigits:0,maximumFractionDigits:0})},tooltip:{callbacks:{label:c=>`${c.dataset.label||''}: ${c.parsed.y.toLocaleString('pt-BR',{style:'currency',currency:'BRL'})}`}}}}});console.log("SUCESSO: Gráfico Custo Setor.");}else if(!ctx)console.warn("AVISO: Canvas CustoSetor.");}catch(e){console.error("ERRO Gráfico Custo Setor:",e);chartInstanceCustoSetor=null;} try{const ctx=canvasQuantidade?.getContext('2d');if(ctx&&topQuantity.length>0){const l=topQuantity.map(i=>i.codEntrada);const d=topQuantity.map(i=>i.sum);chartInstanceQuantidade=new Chart(ctx,{type:'bar',data:{labels:l,datasets:[{label:'Qtd Total',data:d,backgroundColor:cP.teal.bg,borderColor:cP.teal.br,borderWidth:1}]},options:{...commonOpts,plugins:{...commonOpts.plugins,title:{...commonOpts.plugins.title,text:'Top 5 Produtos por Quantidade'},datalabels:{...commonOpts.plugins.datalabels}}}});console.log("SUCESSO: Gráfico Quantidade.");}else if(!ctx)console.warn("AVISO: Canvas Quantidade.");}catch(e){console.error("ERRO Gráfico Quantidade:",e);chartInstanceQuantidade=null;} console.log("Fn renderCharts: Finalizada."); }
    async function renderReportsAndCharts() { console.log(`Fn renderReportsAndCharts: Buscando dados API...`); listaMaisFrequentes.innerHTML='<li>Carregando...</li>'; listaSetoresFrequentes.innerHTML='<li>Carregando...</li>'; listaMaiorQuantidade.innerHTML='<li>Carregando...</li>'; paragrafoCustoTotal.textContent='Calculando...'; renderCharts(null); let reportDataAPI = null; try { const dI=inputFiltroInicio.value||null; const dF=inputFiltroFim.value||null; reportDataAPI = await apiCalcularRelatorios(dI,dF); listaMaisFrequentes.innerHTML = ''; listaSetoresFrequentes.innerHTML = ''; listaMaiorQuantidade.innerHTML = ''; if (!reportDataAPI) throw new Error("API relatórios retornou null/undefined."); const { totalCost=0, topFrequency=[], topQuantity=[], topSectors=[] } = reportDataAPI; if(topFrequency.length>0) topFrequency.forEach(({codEntrada, count})=>{const li=document.createElement('li');li.innerHTML=`<strong>${codEntrada}</strong> (${count} reg.)`;listaMaisFrequentes.appendChild(li);}); else listaMaisFrequentes.innerHTML='<li>-</li>'; if(topSectors.length>0) topSectors.forEach(({sector, count})=>{const li=document.createElement('li');li.innerHTML=`<strong>${sector}</strong> (${count} reg.)`;listaSetoresFrequentes.appendChild(li);}); else listaSetoresFrequentes.innerHTML='<li>-</li>'; if(topQuantity.length>0) topQuantity.forEach(({codEntrada, sum})=>{const li=document.createElement('li');li.innerHTML=`<strong>${codEntrada}</strong> (${sum} und.)`;listaMaiorQuantidade.appendChild(li);}); else listaMaiorQuantidade.innerHTML='<li>-</li>'; paragrafoCustoTotal.textContent = totalCost.toLocaleString('pt-BR',{style:'currency',currency:'BRL'}); console.log("Listas renderizadas com dados API."); } catch (error) { console.error("ERRO ao renderizar relatórios:", error); listaMaisFrequentes.innerHTML='<li>Erro!</li>'; listaSetoresFrequentes.innerHTML='<li>Erro!</li>'; listaMaiorQuantidade.innerHTML='<li>Erro!</li>'; paragrafoCustoTotal.textContent = 'Erro!'; reportDataAPI = null; } try { renderCharts(reportDataAPI); } catch(e) { console.error("Erro ao chamar renderCharts:", e); } }
    async function exportToCSV() { console.log(">>> INFO: Iniciando exportação CSV..."); btnExportarCSV.textContent = "Exportando..."; btnExportarCSV.disabled = true; try { const dI=inputFiltroInicio.value||null; const dF=inputFiltroFim.value||null; const data=await apiObterHistorico(dI,dF); if(!data||data.length===0){const tF=dI||dF; alert(tF?"Não há dados no período.":"Não há dados."); return;} console.log(`Exportando ${data.length} registros filtrados.`); const h=["DataHoraRegistro","CodigoEntrada","DescricaoProduto","Setor","Beneficiamento","QuantidadeRetrabalhada","CustoRetrabalho"]; const esc=(s)=>{if(s==null)return'';s=String(s);if(s.includes(';')||s.includes('"')||s.includes('\n')){s=s.replace(/"/g,'""');return `"${s}"`;}return s;}; const rows=data.map(r=>{let dF='';try{dF=new Date(r.timestamp).toLocaleString('pt-BR',{year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit',second:'2-digit'});dF=esc(dF);}catch(e){dF=esc(r.timestamp);} return[dF,esc(r.codEntrada),esc(r.descricao),esc(r.setor),esc(r.beneficiamento),r.quantidade,(r.custo||0).toFixed(2).replace('.',',')];}); const hR=h.join(';'); const dR=rows.map(row=>row.join(';')).join('\n'); const csv="\uFEFF"+hR+"\n"+dR; const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'}); const url=URL.createObjectURL(blob); const link=document.createElement("a"); link.setAttribute("href",url); const dS=new Date().toISOString().slice(0,10); link.setAttribute("download",`historico_retrabalho_${dS}.csv`); link.style.visibility='hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url); console.log("Download CSV iniciado."); } catch(e) { console.error("ERRO exportar CSV:", e); alert("Erro ao gerar CSV."); } finally { btnExportarCSV.textContent = "Exportar Histórico (CSV)"; try{ const currentFiltered = await apiObterHistorico(inputFiltroInicio.value||null, inputFiltroFim.value||null); btnExportarCSV.disabled = !currentFiltered || currentFiltered.length === 0; } catch { btnExportarCSV.disabled = true; } } }

    // --- 5. Event Listeners ---
    console.log("Adicionando event listeners...");
    checkboxModoCadastro.addEventListener('change', () => { toggleCadastroMode(checkboxModoCadastro.checked); });
    inputNumOP.addEventListener('blur', async () => { if (isCadastroMode) return; const op = inputNumOP.value.trim(); inputNumOP.disabled = true; console.log(`Evt blur OP: "${op}" - Chamando API real...`); preencherFormulario(null); if (op) { try { const apiUrl=`http://localhost:3000/api/produtos/op/${encodeURIComponent(op)}`; const resposta=await fetch(apiUrl); console.log("Resposta Fetch:", resposta.status); if (resposta.ok) { const dP=await resposta.json(); preencherFormulario(dP); if(dP?.OP) inputNumOP.value=dP.OP; } else if (resposta.status === 404) { alert("Nº OP não encontrado!"); } else { console.error("Erro API:", resposta.status, resposta.statusText); let eM=resposta.statusText||"Erro"; try{const eb=await resposta.text(); try{eM=JSON.parse(eb).message||eM;}catch{}}catch{} alert(`Erro ${resposta.status}: ${eM}`);} } catch (error) { console.error("Erro Rede/Fetch:", error); alert("Erro de comunicação ao buscar OP."); } finally { inputNumOP.disabled = false; console.log("Busca fetch finalizada."); } } else { inputNumOP.disabled = false; console.log("Campo OP vazio."); } });
    inputNumOP.addEventListener('keypress', (e) => { if (isCadastroMode) return; if (e.key === 'Enter') { e.preventDefault(); inputNumOP.blur(); } });

    formProduto.addEventListener('submit', async (evento) => { // <<< Listener Submit CORRIGIDO >>>
        evento.preventDefault(); console.log(`>>> INFO: Submit! Modo Cadastro: ${isCadastroMode}`);
        btnPrincipalAcao.disabled = true; btnPrincipalAcao.textContent = 'Processando...';
        try {
            if (isCadastroMode) { // --- CADASTRO (Usa API Simulada) ---
                console.log("Cadastrando..."); const nOP=inputNumOP.value.trim(); const nCE=inputCodEntrada.value.trim(); const nCS=inputCodSaida.value.trim(); const nD=inputDescricao.value.trim(); const nCl=inputCliente.value.trim(); const nB=inputBeneficiamento.value.trim(); const nS=inputSetor.value.trim(); const nP=inputPesoUnitario.value; const nU=inputUnidade.value.trim(); const nVStr=inputValorUnitario.value; if(!nOP||!nCE||!nD||!nVStr){alert("Preencha: Nº OP, Cód. Entrada, Descrição e Valor Unit."); throw new Error("Campos obrigatórios cadastro");} const nV=parseFloat(nVStr); if(isNaN(nV)||nV<0){alert("Valor Unitário inválido."); throw new Error("Valor inválido");} const pN={id:'',OP:nOP,codEntrada:nCE,codSaida:nCS,descricao:nD,cliente:nCl,beneficiamento:nB,setor:nS,pesoUnitario:nP,unidade:nU,valorUnitario:nV};
                const resp = await apiCadastrarProduto(pN); // <<< API SIMULADA >>>
                if (resp.success) { console.log("Produto adicionado:", resp.data); alert(`Produto '${pN.descricao}' cadastrado!`); checkboxModoCadastro.checked=false; toggleCadastroMode(false); }
                else { console.error("Falha cadastro:", resp.error); alert(`Erro: ${resp.error}`); if(resp.error.includes("OP"))inputNumOP.select(); else if(resp.error.includes("Cód. Entrada"))inputCodEntrada.select();}
            } else { // --- RETRABALHO (Usa FETCH REAL para registrar) ---
                console.log("Registrando retrabalho..."); const op=inputNumOP.value.trim(); const qS=inputQuantidadeRetrabalho.value; const cI=inputCodEntrada.value; if(!cI){alert("Busque OP válida."); throw new Error("OP não buscada");} const q=parseInt(qS,10); if(isNaN(q)||q<=0){alert("Qtd inválida."); inputQuantidadeRetrabalho.select(); throw new Error("Quantidade inválida");}
                // Reconfirma dados via fetch
                let dP = null; try {const apiUrlCheck=`http://localhost:3000/api/produtos/op/${encodeURIComponent(op)}`; const respostaCheck = await fetch(apiUrlCheck); if(respostaCheck.ok) dP = await respostaCheck.json(); else console.warn(`API ${respostaCheck.status} ao reconfirmar OP.`);} catch(e){console.error("Erro rede reconfirmar OP:",e);throw new Error("Erro comunicação registro.");} if(!dP){alert("Erro: Dados OP não encontrados ao registrar."); throw new Error("Dados OP sumiram?");}
                const vU=parseFloat(dP.valorUnitario||0); const c=q*vU; const ts=new Date().toISOString();
                // <<< Objeto CORRETO com numOP >>>
                const novoRegistroParaAPI={timestamp:ts,numOP:op,codEntrada:dP.codEntrada,descricao:dP.descricao||'',setor:dP.setor||'',beneficiamento:dP.beneficiamento||'',quantidade:q,custo:c};
                console.log(">>> INFO: Enviando para POST /api/retrabalhos:", novoRegistroParaAPI);
                // <<< CHAMADA FETCH REAL PARA REGISTRAR >>>
                let sucessoRegistro = false; try { const apiUrlRegister = 'http://localhost:3000/api/retrabalhos'; const respostaFetch = await fetch(apiUrlRegister, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(novoRegistroParaAPI) }); console.log("Resposta Fetch Registro:", respostaFetch.status); if (respostaFetch.ok) { const registroSalvo = await respostaFetch.json(); console.log("Registro salvo via API:", registroSalvo); sucessoRegistro = true; /* Atualiza API simulada local para UI */ historicoRetrabalho_API.unshift(novoRegistroParaAPI); salvarEstadoLocal(); } else { console.error("Erro API registrar:", respostaFetch.status, respostaFetch.statusText); let eM=respostaFetch.statusText||"?"; try{const eb=await respostaFetch.text(); try{eM=JSON.parse(eb).message||eM;}catch{}}catch{} alert(`Erro registro (${respostaFetch.status}): ${eM}`); } } catch (error) { console.error("Erro Rede/Fetch registro:", error); alert("Erro comunicação registro."); }
                // Atualiza UI se sucesso
                if(sucessoRegistro){ console.log("Registro salvo, atualizando UI..."); await renderizarTabelaHistorico(); await renderReportsAndCharts(); inputNumOP.value=''; preencherFormulario(null); console.log("Form limpo."); inputNumOP.focus();}
                else { console.error("Falha no registro."); /* Não limpa form */ }
            }
        } catch (error) { console.error("Erro GERAL submit:", error); if (!error?.message?.includes("inválid") && !error?.message?.includes("obrigatórios") && !error?.message?.includes("OP não buscada") && !error?.message?.includes("sumiram") && !error?.message?.includes("comunicação")) alert("Erro inesperado.");}
        finally { toggleCadastroMode(isCadastroMode); btnPrincipalAcao.disabled = false; }
    });

    tbodyHistorico.addEventListener('click', async (evento) => { if (evento.target.classList.contains('btn-excluir-registro')) { const idxStr=evento.target.dataset.index; if(idxStr!==undefined){ const idx=parseInt(idxStr,10); const reg=historicoRetrabalho_API[idx]; if(!reg){console.error("Erro Excluir: Índice não encontrado no array local", idx); return;} const conf=confirm(`Excluir registro?\n\nOP: ${reg.numOP}\nProd: ${reg.descricao||reg.codEntrada}\nQtd: ${reg.quantidade}`); if(conf){ console.log("Excluindo índice:", idx); try{ const resp=await apiExcluirRegistro(idx); // <<< USA API SIMULADA >>>
    if(resp.success){console.log("Excluído."); await renderizarTabelaHistorico(); await renderReportsAndCharts();} else {console.error("Falha excluir API:",resp.error); alert(`Erro: ${resp.error}`);}}catch(e){console.error("Erro GERAL excluir:",e);alert("Erro excluir.");}} } } });
    inputBuscaHistorico.addEventListener('input', filtrarTabelaHistorico);
    btnExportarCSV.addEventListener('click', exportToCSV); // <<< USA API SIMULADA >>>
    btnFiltrarData.addEventListener('click', async () => { console.log("Click Filtrar."); await renderizarTabelaHistorico(); await renderReportsAndCharts(); }); // <<< USA API SIMULADA >>>
    btnLimparFiltroData.addEventListener('click', async () => { console.log("Click Limpar Filtro."); inputFiltroInicio.value=''; inputFiltroFim.value=''; await renderizarTabelaHistorico(); await renderReportsAndCharts(); }); // <<< USA API SIMULADA >>>
    console.log("Event Listeners adicionados.");

    // --- 6. Inicialização ---
    async function inicializarApp() {
        console.log("Executando inicialização...");
        carregarEstadoLocal(); // Carrega dados para APIs simuladas
        checkboxModoCadastro.checked = false;
        toggleCadastroMode(false);
        inputFiltroInicio.value = ''; inputFiltroFim.value = ''; inputBuscaHistorico.value = '';
        try {
            await renderizarTabelaHistorico();    // <<< USA API SIMULADA >>>
            await renderReportsAndCharts();       // <<< USA API SIMULADA >>>
        } catch (error) { console.error("Erro renderização inicial:", error); alert("Erro ao carregar dados."); }
        console.log("--- Fim da inicialização do script.js ---");
    }
    inicializarApp();

}); // Fim do DOMContentLoaded