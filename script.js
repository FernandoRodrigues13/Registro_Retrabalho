// Espera todo o conteúdo HTML ser carregado antes de executar o código JS
document.addEventListener('DOMContentLoaded', () => {
    // Tenta registrar o plugin Datalabels
    try { if (typeof ChartDataLabels !== 'undefined') { Chart.register(ChartDataLabels); console.log(">>> SUCESSO: Plugin ChartDataLabels registrado."); } else { console.error(">>> ERRO: ChartDataLabels não encontrado."); } } catch (error) { console.error(">>> ERRO ao registrar ChartDataLabels:", error); }
    console.log("--- Iniciando script.js (v2 - Busca por OP) ---");

    // --- 1. Seleção de Elementos do DOM ---
    console.log("Selecionando elementos HTML...");
    const formProduto = document.getElementById('form-produto'); const btnPrincipalAcao = document.getElementById('btn-principal-acao'); const inputNumOP = document.getElementById('num-op'); const inputCodEntrada = document.getElementById('cod-entrada'); const inputCodSaida = document.getElementById('cod-saida'); const inputDescricao = document.getElementById('descricao'); const inputCliente = document.getElementById('cliente'); const inputBeneficiamento = document.getElementById('beneficiamento'); const inputSetor = document.getElementById('setor'); const inputPesoUnitario = document.getElementById('peso-unitario'); const inputUnidade = document.getElementById('unidade'); const inputValorUnitario = document.getElementById('valor-unitario'); const inputQuantidadeRetrabalho = document.getElementById('quantidade-retrabalho'); const tbodyHistorico = document.getElementById('tbody-historico'); const listaMaisFrequentes = document.getElementById('lista-mais-frequentes'); const listaSetoresFrequentes = document.getElementById('lista-setores-frequentes'); const listaMaiorQuantidade = document.getElementById('lista-maior-quantidade'); const paragrafoCustoTotal = document.getElementById('paragrafo-custo-total'); const canvasFrequencia = document.getElementById('grafico-frequencia-produto'); const canvasCustoSetor = document.getElementById('grafico-custo-setor'); const canvasQuantidade = document.getElementById('grafico-quantidade-produto'); const inputBuscaHistorico = document.getElementById('busca-historico'); const btnExportarCSV = document.getElementById('btn-exportar-csv'); const inputFiltroInicio = document.getElementById('filtro-data-inicio'); const inputFiltroFim = document.getElementById('filtro-data-fim'); const btnFiltrarData = document.getElementById('btn-filtrar-data'); const btnLimparFiltroData = document.getElementById('btn-limpar-filtro-data');
    if (!formProduto || !inputNumOP || !tbodyHistorico || !inputBuscaHistorico || !btnExportarCSV || !inputFiltroInicio || !inputFiltroFim || !btnFiltrarData || !btnLimparFiltroData) { console.error("ERRO: Elementos essenciais não encontrados!"); alert("Erro crítico!"); return; } console.log("Elementos selecionados.");

    // --- 2. Estado da Aplicação ---
    const bancoDeDadosSimulado = [ { OP: '10', codEntrada: '51883168', codSaida: 'AE40018009', descricao: 'REFORCO FREIO DE MAO COMPLETO', cliente: 'CISER FIXADORES AUTOMOTIVOS SA', beneficiamento: 'ZN INCOLOR TRIVALENTE - EA1', setor: 'ESTACIONARIO I', pesoUnitario: '0.80', unidade: 'KG', valorUnitario: 2.71 }, { OP: '30', codEntrada: '46480294E', codSaida: '46480294', descricao: 'STAFFA RINF BOCCHETONE PK-UP EST', cliente: 'ACUMENT BRASIL SISTEMAS DE FIXAÇÃO LTDA', beneficiamento: 'ZN IRIDESCENTE TRIVALENTE - EA1', setor: 'ESTACIONARIO I', pesoUnitario: '0.18', unidade: 'KG', valorUnitario: 0.47 }, { OP: '28', codEntrada: 'AE020120033CS', codSaida: 'AE020120033', descricao: 'SUPORTE FILTRO COMPLETO', cliente: 'AETHRA SISTEMAS AUTOMOTIVOS S.A.', beneficiamento: 'ZN INCOLOR TRIVALENTE - RA1', setor: 'ROTATIVO I', pesoUnitario: '0.03', unidade: 'PC', valorUnitario: 0.50 }, { OP: '115', codEntrada: '5U48390579T', codSaida: '5U4.839.057.9', descricao: 'PRESILHA ESTAMPADA COM TRAT TERMICO', cliente: 'DAYCO POWER TRANSMISSION LTDA', beneficiamento: 'ZN IRIDESCENTE TRIVALENTE + DSH - RA1', setor: 'ROTATIVO I', pesoUnitario: '0.00', unidade: 'PC', valorUnitario: 0.07 }, { OP: '200', codEntrada: 'E3B1-9034-A-03C', codSaida: 'E3B19034A03Z', descricao: 'INSERTO CAP RETAINER FLEX PETROL', cliente: 'TIBERINA AUTOMOTIVE MG COMP. MET. P/IND AUTOM LTDA', beneficiamento: 'ZN NIQUEL INCOLOR + SELANTE - RA2', setor: 'ROTATIVO II', pesoUnitario: '0.07', unidade: 'PC', valorUnitario: 0.65 }, { OP: '29', codEntrada: 'HDB080', codSaida: '55181233', descricao: 'WUM64 POLIA COND BALANCEADA', cliente: 'JOALMI IND E COM LTDA', beneficiamento: 'ZN IRIDESCENTE TRIVALENTE + SELANTE - EA2', setor: 'ESTACIONARIO II', pesoUnitario: '1.72', unidade: 'PC', valorUnitario: 2.43 } ];
    console.log("Banco de dados simulado:", bancoDeDadosSimulado);
    let historicoRetrabalho = []; try { const hs=localStorage.getItem('controleRetrabalhoV2_historico'); if(hs){const pd=JSON.parse(hs); if(Array.isArray(pd)){historicoRetrabalho=pd; console.log("Histórico carregado.");} else {console.warn("LS inválido."); localStorage.removeItem('controleRetrabalhoV2_historico');}} else console.log("Sem histórico no LS."); } catch(e){console.error("Erro LS:",e); localStorage.removeItem('controleRetrabalhoV2_historico');} console.log("Histórico inicial:", historicoRetrabalho);

    // --- 3. Variáveis Globais para Gráficos ---
    let chartInstanceFrequencia = null; let chartInstanceCustoSetor = null; let chartInstanceQuantidade = null;
    console.log("Vars de gráfico inicializadas como null.");

    // --- 4. Funções ---
    console.log("Definindo funções...");

    function buscarDadosPorOP(numeroOP) { console.log(`Fn buscarDadosPorOP: Buscando OP "${numeroOP}"`); if (!numeroOP) return undefined; const opFmt = numeroOP.trim(); const data = bancoDeDadosSimulado.find(item => item.OP === opFmt); console.log(data ? "OP encontrada." : "OP NÃO encontrada."); return data; }
    function preencherFormulario(dadosItem) { console.log("Fn preencherFormulario: Recebeu:", dadosItem); if (dadosItem) { inputCodEntrada.value = dadosItem.codEntrada || ""; inputCodSaida.value = dadosItem.codSaida || ""; inputDescricao.value = dadosItem.descricao || ""; inputCliente.value = dadosItem.cliente || ""; inputBeneficiamento.value = dadosItem.beneficiamento || ""; inputSetor.value = dadosItem.setor || ""; inputPesoUnitario.value = dadosItem.pesoUnitario || ""; inputUnidade.value = dadosItem.unidade || ""; inputValorUnitario.value = parseFloat(dadosItem.valorUnitario || 0).toFixed(2); inputQuantidadeRetrabalho.value = ""; inputQuantidadeRetrabalho.focus(); console.log("Campos preenchidos."); } else { inputCodEntrada.value = ""; inputCodSaida.value = ""; inputDescricao.value = ""; inputCliente.value = ""; inputBeneficiamento.value = ""; inputSetor.value = ""; inputPesoUnitario.value = ""; inputUnidade.value = ""; inputValorUnitario.value = ""; inputQuantidadeRetrabalho.value = ""; console.log("Campos limpos."); } }
    function salvarHistorico() { console.log("Fn salvarHistorico: Salvando..."); try { localStorage.setItem('controleRetrabalhoV2_historico', JSON.stringify(historicoRetrabalho)); console.log("Histórico salvo."); } catch (e) { console.error("ERRO ao salvar histórico:", e); } }
    function getFilteredHistory() { const dI=inputFiltroInicio.value; const dF=inputFiltroFim.value; console.log(`Fn getFilteredHistory: Filtrando De=${dI}, Até=${dF}`); if (!dI && !dF) return [...historicoRetrabalho]; const iTs=dI?new Date(dI+'T00:00:00').getTime():null; const fTs=dF?new Date(dF+'T23:59:59').getTime():null; const hF=historicoRetrabalho.filter(r=>{ const rTs = r.timestamp ? new Date(r.timestamp).getTime() : 0; const aS=(iTs===null)||(rTs>=iTs); const bE=(fTs===null)||(rTs<=fTs); return aS&&bE;}); console.log(`${hF.length} registros no período.`); return hF; }
    function filtrarTabelaHistorico() { const t=inputBuscaHistorico.value.toLowerCase().trim(); const lns=tbodyHistorico.querySelectorAll('tr'); let lV=0; console.log(`Fn filtrarTabelaHistorico: Filtrando por "${t}"`); lns.forEach(l=>{if(l.querySelector('.historico-vazio')){l.style.display='';return;} const txtL=l.textContent.toLowerCase(); const c=txtL.includes(t); l.style.display=c?'':'none'; if(c)lV++;}); console.log(`${lV} linhas visíveis.`); }
    function exportToCSV() { const data=getFilteredHistory(); console.log(`>>> INFO: Exportando ${data.length} registros (filtrados)...`); if(!data||data.length===0){const tF=inputFiltroInicio.value||inputFiltroFim.value; alert(tF?"Não há dados no período.":"Não há dados."); return;} const h=["DataHoraRegistro","CodigoEntrada","DescricaoProduto","Setor","Beneficiamento","QuantidadeRetrabalhada","CustoRetrabalho"]; const esc=(s)=>{if(s==null)return'';s=String(s);if(s.includes(';')||s.includes('"')||s.includes('\n')){s=s.replace(/"/g,'""');return `"${s}"`;}return s;}; const rows=data.map(r=>{let dF='';try{dF=new Date(r.timestamp).toLocaleString('pt-BR',{year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit',second:'2-digit'});dF=esc(dF);}catch(e){dF=esc(r.timestamp);} return[dF,esc(r.codEntrada),esc(r.descricao),esc(r.setor),esc(r.beneficiamento),r.quantidade,(r.custo||0).toFixed(2).replace('.',',')];}); const hR=h.join(';'); const dR=rows.map(row=>row.join(';')).join('\n'); const csv="\uFEFF"+hR+"\n"+dR; console.log("CSV gerado."); const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'}); const url=URL.createObjectURL(blob); const link=document.createElement("a"); link.setAttribute("href",url); const dS=new Date().toISOString().slice(0,10); link.setAttribute("download",`historico_retrabalho_${dS}.csv`); link.style.visibility='hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url); console.log("Download CSV iniciado."); }
    function renderizarTabelaHistorico() { const data=getFilteredHistory(); console.log(`Fn renderizarTabelaHistorico: Renderizando ${data.length} itens...`); tbodyHistorico.innerHTML=''; const nC=8; const hD=data.length>0; if(!hD){const tF=inputFiltroInicio.value||inputFiltroFim.value; tbodyHistorico.innerHTML=`<tr><td colspan="${nC}" class="historico-vazio">${tF?'Nada no período.':'Nenhum registro.'}</td></tr>`;} else{data.forEach((reg)=>{const rI=historicoRetrabalho.findIndex(i=>i.timestamp===reg.timestamp&&i.numOP===reg.numOP);const tr=document.createElement('tr');tr.setAttribute('data-index',rI);const dF=new Date(reg.timestamp).toLocaleString('pt-BR',{day:'2-digit',month:'2-digit',year:'numeric',hour:'2-digit',minute:'2-digit'});const cF=(reg.custo||0).toLocaleString('pt-BR',{style:'currency',currency:'BRL'});tr.innerHTML=`<td>${dF}</td><td>${reg.codEntrada||''}</td><td>${reg.descricao||''}</td><td>${reg.setor||''}</td><td>${reg.beneficiamento||''}</td><td>${reg.quantidade}</td><td>${cF}</td><td><button class="btn-excluir-registro" data-index="${rI}" title="Excluir">Excluir</button></td>`;tbodyHistorico.appendChild(tr);});} btnExportarCSV.disabled=!hD; console.log(`Tabela renderizada. Exportar ${hD?'ON':'OFF'}.`); filtrarTabelaHistorico();}
    function renderCharts(reportData) { console.log("Fn renderCharts: Iniciando..."); try { if (chartInstanceFrequencia instanceof Chart) chartInstanceFrequencia.destroy(); } catch(e) { console.error("Erro destroy Freq:", e); } finally { chartInstanceFrequencia = null; } try { if (chartInstanceCustoSetor instanceof Chart) chartInstanceCustoSetor.destroy(); } catch(e) { console.error("Erro destroy Custo:", e); } finally { chartInstanceCustoSetor = null; } try { if (chartInstanceQuantidade instanceof Chart) chartInstanceQuantidade.destroy(); } catch(e) { console.error("Erro destroy Quant:", e); } finally { chartInstanceQuantidade = null; } if (typeof Chart === 'undefined' || typeof ChartDataLabels === 'undefined'){ console.error("ERRO: Chart.js/Datalabels não carregado."); return; } if (!reportData) { console.warn("AVISO: reportData null/undefined."); return; } const hasData = reportData.sortedFrequency?.length || reportData.sortedQuantity?.length || reportData.sortedCostBySector?.length; if (!hasData) { console.warn("AVISO: Sem dados para gráficos."); return; } console.log("INFO: Renderizando gráficos..."); const { sortedFrequency=[], sortedQuantity=[], sortedCostBySector=[] } = reportData; const cP={blue:{bg:'rgba(54,162,235,0.7)',br:'rgba(54,162,235,1)'},red:{bg:'rgba(255,99,132,0.7)',br:'rgba(255,99,132,1)'},teal:{bg:'rgba(75,192,192,0.7)',br:'rgba(75,192,192,1)'}}; const commonOpts={responsive:true,maintainAspectRatio:false,scales:{x:{ticks:{font:{size:10}},grid:{display:false}},y:{beginAtZero:true,grid:{color:'#eee'}}},plugins:{legend:{display:false},title:{display:true,padding:{top:10,bottom:10},font:{size:13,weight:'500'},color:'#444'},datalabels:{display:true,anchor:'end',align:'end',offset:-2,color:'#333',font:{size:9,weight:'bold'},formatter:(v)=>v===0?'':v}}}; try{const ctx=canvasFrequencia?.getContext('2d');if(ctx&&sortedFrequency.length>0){const l=sortedFrequency.map(([c])=>c);const d=sortedFrequency.map(([,n])=>n);chartInstanceFrequencia=new Chart(ctx,{type:'bar',data:{labels:l,datasets:[{label:'Registros',data:d,backgroundColor:cP.blue.bg,borderColor:cP.blue.br,borderWidth:1}]},options:{...commonOpts,plugins:{...commonOpts.plugins,title:{...commonOpts.plugins.title,text:'Top 5 Produtos por Frequência'},datalabels:{...commonOpts.plugins.datalabels}}}});console.log("SUCESSO: Gráfico Frequência.");}else if(!ctx)console.warn("AVISO: Canvas Freq não encontrado.");}catch(e){console.error("ERRO Gráfico Frequência:",e);chartInstanceFrequencia=null;} try{const ctx=canvasCustoSetor?.getContext('2d');if(ctx&&sortedCostBySector.length>0){const l=sortedCostBySector.map(([s])=>s);const d=sortedCostBySector.map(([,c])=>c);chartInstanceCustoSetor=new Chart(ctx,{type:'bar',data:{labels:l,datasets:[{label:'Custo Total',data:d,backgroundColor:cP.red.bg,borderColor:cP.red.br,borderWidth:1}]},options:{...commonOpts,scales:{...commonOpts.scales,y:{beginAtZero:true,grid:{color:'#eee'},ticks:{callback:v=>v.toLocaleString('pt-BR',{style:'currency',currency:'BRL',minimumFractionDigits:0})}}},plugins:{...commonOpts.plugins,title:{...commonOpts.plugins.title,text:'Custo Total por Setor (Top 3)'},datalabels:{...commonOpts.plugins.datalabels,formatter:v=>v===0?'':v.toLocaleString('pt-BR',{style:'currency',currency:'BRL',minimumFractionDigits:0,maximumFractionDigits:0})},tooltip:{callbacks:{label:c=>`${c.dataset.label||''}: ${c.parsed.y.toLocaleString('pt-BR',{style:'currency',currency:'BRL'})}`}}}}});console.log("SUCESSO: Gráfico Custo x Setor.");}else if(!ctx)console.warn("AVISO: Canvas CustoSetor não encontrado.");}catch(e){console.error("ERRO Gráfico Custo x Setor:",e);chartInstanceCustoSetor=null;} try{const ctx=canvasQuantidade?.getContext('2d');if(ctx&&sortedQuantity.length>0){const l=sortedQuantity.map(([c])=>c);const d=sortedQuantity.map(([,s])=>s);chartInstanceQuantidade=new Chart(ctx,{type:'bar',data:{labels:l,datasets:[{label:'Qtd Total',data:d,backgroundColor:cP.teal.bg,borderColor:cP.teal.br,borderWidth:1}]},options:{...commonOpts,plugins:{...commonOpts.plugins,title:{...commonOpts.plugins.title,text:'Top 5 Produtos por Quantidade'},datalabels:{...commonOpts.plugins.datalabels}}}});console.log("SUCESSO: Gráfico Quantidade.");}else if(!ctx)console.warn("AVISO: Canvas Quantidade não encontrado.");}catch(e){console.error("ERRO Gráfico Quantidade:",e);chartInstanceQuantidade=null;} console.log("Fn renderCharts: Finalizada."); }
    function renderReportsAndCharts() { const filteredHistory = getFilteredHistory(); console.log(`Fn renderReportsAndCharts: Calculando com ${filteredHistory.length} itens...`); listaMaisFrequentes.innerHTML = ''; listaSetoresFrequentes.innerHTML = ''; listaMaiorQuantidade.innerHTML = ''; paragrafoCustoTotal.textContent = 'R$ 0,00'; let reportData = { sortedFrequency:[], sortedQuantity:[], sortedSectors:[], sortedCostBySector:[] }; if (filteredHistory.length > 0) { const freq={}, quant={}, sectFreq={}, costSect={}; let totalCost=0; filteredHistory.forEach(r => { const pK=r.codEntrada||'N/A'; const sK=r.setor||'N/A'; const cV=r.custo||0; freq[pK]=(freq[pK]||0)+1; quant[pK]=(quant[pK]||0)+r.quantidade; totalCost+=cV; sectFreq[sK]=(sectFreq[sK]||0)+1; costSect[sK]=(costSect[sK]||0)+cV; }); const sFreq=Object.entries(freq).sort(([,a],[,b])=>b-a).slice(0,5); const sQuant=Object.entries(quant).sort(([,a],[,b])=>b-a).slice(0,5); const sSect=Object.entries(sectFreq).sort(([,a],[,b])=>b-a).slice(0,3); const sCostSect=Object.entries(costSect).sort(([,a],[,b])=>b-a).slice(0,3); if(sFreq.length>0) sFreq.forEach(([c,n],i)=>{const li=document.createElement('li');li.innerHTML=`<strong>${c}</strong> (${n} reg.)`;if(i===0)li.classList.add('highlight-item');listaMaisFrequentes.appendChild(li);}); else listaMaisFrequentes.innerHTML='<li>-</li>'; if(sSect.length>0) sSect.forEach(([s,n],i)=>{const li=document.createElement('li');li.innerHTML=`<strong>${s}</strong> (${n} reg.)`;if(i===0)li.classList.add('highlight-sector');listaSetoresFrequentes.appendChild(li);}); else listaSetoresFrequentes.innerHTML='<li>-</li>'; if(sQuant.length>0) sQuant.forEach(([c,s])=>{const li=document.createElement('li');li.innerHTML=`<strong>${c}</strong> (${s} und.)`;listaMaiorQuantidade.appendChild(li);}); else listaMaiorQuantidade.innerHTML='<li>-</li>'; paragrafoCustoTotal.textContent = totalCost.toLocaleString('pt-BR',{style:'currency',currency:'BRL'}); console.log("Listas de relatórios renderizadas."); reportData = { sortedFrequency:sFreq, sortedQuantity:sQuant, sortedSectors:sSect, sortedCostBySector:sCostSect }; } else { listaMaisFrequentes.innerHTML='<li>N/A</li>'; listaSetoresFrequentes.innerHTML='<li>N/A</li>'; listaMaiorQuantidade.innerHTML='<li>N/A</li>'; console.log("Sem dados filtrados para relatórios."); } try { renderCharts(reportData); } catch(e) { console.error("Erro ao chamar renderCharts:", e); } }


    // --- 5. Event Listeners ---
    console.log("Adicionando event listeners...");

    inputNumOP.addEventListener('blur', () => {
        const opDigitada = inputNumOP.value;
        console.log(`Evt blur OP: "${opDigitada}"`);
        if (opDigitada.trim()) {
            const dadosEncontrados = buscarDadosPorOP(opDigitada);
            preencherFormulario(dadosEncontrados); // Preenche ou limpa

            if (!dadosEncontrados) {
                // Se não encontrou, AVISA o usuário
                alert("Nº OP não encontrado na base de dados!");
                // REMOVEMOS focus() e select() daqui para evitar travamento
            }
        } else {
            // Se o campo ficou vazio, apenas limpa os outros campos, SEM ALERTA
            console.log("Campo Nº OP vazio no blur, limpando formulário.");
            preencherFormulario(null); // Chama preencher com null para limpar
        }
    });

    inputNumOP.addEventListener('keypress', (e) => { if (e.key === 'Enter') { e.preventDefault(); inputNumOP.blur(); } });
    formProduto.addEventListener('submit', (evento) => {
        evento.preventDefault(); console.log(">>> INFO: Submit form!");
        const op=inputNumOP.value.trim(); const qS=inputQuantidadeRetrabalho.value; const cI=inputCodEntrada.value;
        if(!cI){alert("Busque OP válida.");inputNumOP.focus();return;}
        const q=parseInt(qS,10); if(isNaN(q)||q<=0){alert("Qtd inválida.");inputQuantidadeRetrabalho.focus();inputQuantidadeRetrabalho.select();return;}
        const dP=buscarDadosPorOP(op); if(!dP){alert("Erro: Dados OP não encontrados.");inputNumOP.focus();return;}
        const vU=parseFloat(dP.valorUnitario||0); const c=q*vU; const ts=new Date().toISOString();
        const novoRegistro={timestamp:ts,numOP:dP.OP,codEntrada:dP.codEntrada,descricao:dP.descricao||'',setor:dP.setor||'',beneficiamento:dP.beneficiamento||'',quantidade:q,custo:c};
        console.log(">>> INFO: Novo registro a ser adicionado:", novoRegistro);
        historicoRetrabalho.unshift(novoRegistro);
        salvarHistorico();
        renderizarTabelaHistorico();
        renderReportsAndCharts(); // <<< CHAMA AQUI PARA ATUALIZAR TUDO
        inputNumOP.value=''; // <<< LIMPEZA DO FORMULÁRIO >>>
        preencherFormulario(null);
        console.log(">>> INFO: Form limpo após registro.");
        inputNumOP.focus();
    });
    tbodyHistorico.addEventListener('click', (evento) => { if (evento.target.classList.contains('btn-excluir-registro')) { const idxStr=evento.target.dataset.index; if(idxStr!==undefined){ const idx=parseInt(idxStr,10); const reg=historicoRetrabalho[idx]; if(!reg) return; const conf=confirm(`Excluir registro?\n\nOP: ${reg.numOP}\nProd: ${reg.descricao||reg.codEntrada}\nQtd: ${reg.quantidade}`); if(conf){ historicoRetrabalho.splice(idx,1); salvarHistorico(); renderizarTabelaHistorico(); renderReportsAndCharts(); console.log("Registro excluído."); } } } });
    inputBuscaHistorico.addEventListener('input', filtrarTabelaHistorico);
    btnExportarCSV.addEventListener('click', exportToCSV);
    btnFiltrarData.addEventListener('click', () => { console.log("Click Filtrar Data."); renderizarTabelaHistorico(); renderReportsAndCharts(); });
    btnLimparFiltroData.addEventListener('click', () => { console.log("Click Limpar Filtro Data."); inputFiltroInicio.value=''; inputFiltroFim.value=''; renderizarTabelaHistorico(); renderReportsAndCharts(); });
    console.log("Event Listeners adicionados.");

    // --- 6. Inicialização ---
    console.log("Executando inicialização...");
    preencherFormulario(null); inputNumOP.value = ''; inputNumOP.focus();
    inputFiltroInicio.value = ''; inputFiltroFim.value = ''; inputBuscaHistorico.value = '';
    renderizarTabelaHistorico();
    renderReportsAndCharts();
    console.log("--- Fim da inicialização do script.js ---");

}); // Fim do DOMContentLoaded